d2[[20]]
d2[[100]]
d2[[1000]]
d7 <- showme(7, 4000)
d7[[1]]
d7[[2]]
d7[[3]]
d7[[3]]
d7[[4]]
d7[[5]]
d7[[6]]
d7[[7]]
d7[[8]]
d7[[15]]
d7[[30]]
d7[[100]]
d7[[150]]
d7[[224]]
d7[[5]]
library(devtools)
install_github(repo="RShapeTarget", username="pierrejacob")
install.packages("C:/Rtools/zips/RShapeTarget-master.zip", repos = NULL)
install.packages("C:/Rtools/zips/RShapeTarget_1.0.zip", repos = NULL)
options(stringsAsFactors=F)
library(RODBC)
library(doBy)
library(xtable)
conn <- odbcConnect("baseball")
sqlQuery(conn, "use BDB")
ruthB <- sqlQuery(conn, "select * from batting where playerid = 'ruthba01'")
ruthP <- sqlQuery(conn, "select * from pitching where playerid = 'ruthba01'")
ruthF <- sqlQuery(conn, "select * from fielding where playerid = 'ruthba01'")
ruthOF <- sqlQuery(conn, "select * from fieldingOF where playerid = 'ruthba01'")
xtable(ruthB)
install.packages("xtable")
library(xtable)
xtable(ruthB)
ruthB
library(plotGoogleMaps)
library(RColorBrewer)
#jit <- 0
day2map <- as.Date("2013-12-01")#:as.Date("2013-12-09")
#colpal <- brewer.pal(length(day2map), "RdBu")
toMap <- subset(sel13, gamedate %in% day2map)[,c("id", "gamedate", "lon", "lat", "teams", "league")]
library(RODBC)
conn <- odbcConnect("BPro")
sqlQuery(conn, "use warehouse")
anno <- 2013
sqltxt1 <- paste("
select game_id, lvl, year_id, pos2_fld_id, pit_id, bat_id
, PA_CALLED_BALL_CT as balls, PA_CALLED_STRIKE_CT as strikes
from events
where year_id = ", anno, "
and lvl in ('aaa', 'aax', 'afa', 'afx', 'asx')
", sep="")
sqltxt2 <- paste("
select game_id, lvl, base4_ump_id as umpirehid
from games
where year_id = ", anno, "
and lvl in ('aaa', 'aax', 'afa', 'afx', 'asx')
", sep="")
events <- sqlQuery(conn, sqltxt1)
games <- sqlQuery(conn, sqltxt2)
dati <- merge(events, games, by="game_id")
eval(parse(text=paste("dati", anno, " <- dati", sep="")))
eval(parse(text=paste("save(dati", anno, ", file='I:/Baseball/Dati/Various/MILBframe/dati", anno, ".rdata')", sep="")))
shell.exec("I:/beep.bat")
conn <- odbcConnect("BPro")
library(RODBC)
conn <- odbcConnect("BPro")
sqlQuery(conn, "use warehouse")
conn <- odbcConnect("BPro")
conn <- odbcConnect("BPro")
library(RODBC)
conn <- odbcConnect("BPro")
library(RODBC)
conn <- odbcConnect("BPro")
60+35+66+120+75+85+95
library(RODBC)
conn <- odbcConnect("BPro")
library(RODBC)
conn <- odbcConnect("BPro")
sqlQuery(conn, "use warehouse")
anno <- 2013
sqltxt1 <- paste("
select game_id, lvl, year_id, pos2_fld_id, pit_id, bat_id
, PA_CALLED_BALL_CT as balls, PA_CALLED_STRIKE_CT as strikes
from events
where year_id = ", anno, "
and lvl in ('aaa', 'aax', 'afa', 'afx', 'asx')
", sep="")
sqltxt2 <- paste("
select game_id, lvl, base4_ump_id as umpirehid
from games
where year_id = ", anno, "
and lvl in ('aaa', 'aax', 'afa', 'afx', 'asx')
", sep="")
events <- sqlQuery(conn, sqltxt1)
games <- sqlQuery(conn, sqltxt2)
dati <- merge(events, games, by="game_id")
eval(parse(text=paste("dati", anno, " <- dati", sep="")))
eval(parse(text=paste("save(dati", anno, ", file='I:/Baseball/Dati/Various/MILBframe/dati", anno, ".rdata')", sep="")))
shell.exec("I:/beep.bat")
season <- 2013
memory.limit(4000)
options(stringsAsFactors=F)
library(RODBC)
library(doBy)
library(lme4)
yrstring <- paste(season-2, season-1, season, sep=", ")
yrstring
anni <- unlist(strsplit(yrstring, ", "))
anni
for(anno in anni){
load(paste("I:/Baseball/Dati/Various/MILBframe/dati", anno, ".rdata", sep=""))
}
eval(parse(text=paste("dati <- do.call(rbind, list(", paste(paste("dati", anni, sep=""), collapse=", "),"))", sep="")))
dati <- subset(dati, substr(lvl.x, 1, 2)=="aa")
#rm(dati2010, dati2011, dati2012)
gc()
framing <- summaryBy(balls + strikes ~ pos2_fld_id + pit_id+ bat_id+ umpirehid, data=dati, FUN=sum, keep.names=T)
framing$spct <- framing$strikes / (framing$balls + framing$strikes)
framing <- subset(framing, balls+strikes>0)
framing$pitches <- framing$balls + framing$strikes
fit <- lmer(spct ~ 1
+ (1 | pos2_fld_id)
+ (1 | pit_id)
+ (1 | bat_id)
+ (1 | umpirehid)
, data = framing
, weights = pitches
, family = binomial
)
shell.exec("I:/beep.bat")
catval <- data.frame(cat_id=rownames(ranef(fit)$pos2_fld_id), catval=ranef(fit)$pos2_fld_id[,1])
catval <- catval[order(catval$catval),]
pitval <- data.frame(pit_id=rownames(ranef(fit)$pit_id), pitval=ranef(fit)$pit_id[,1])
batval <- data.frame(bat_id=rownames(ranef(fit)$bat_id), batval=ranef(fit)$bat_id[,1])
umpval <- data.frame(ump_id=rownames(ranef(fit)$umpirehid), umpval=ranef(fit)$umpirehid[,1])
smp <- summaryBy(balls + strikes ~ year_id + pos2_fld_id + pit_id+ bat_id+ umpirehid, data=dati, FUN=sum, keep.names=T)
smp <- subset(smp, year_id == season)
smp$spct <- smp$strikes / (smp$balls + smp$strikes)
smp <- subset(smp, balls+strikes>0)
smp$pitches <- smp$balls + smp$strikes
names(smp)[2] <- "cat_id"
names(smp)[5] <- "ump_id"
smp <- merge(smp, pitval)
smp <- merge(smp, catval)
smp <- merge(smp, batval)
smp <- merge(smp, umpval)
smp$rancomb <- smp$pitval + smp$batval + smp$umpval + smp$catval
smp$avgcat <- exp(fixef(fit) + smp$pitval + smp$batval + smp$umpval) / (1 + exp(fixef(fit) + smp$pitval + smp$batval + smp$umpval))
smp$extraprob <- smp$spct - smp$avgcat
smp$wextraprob <- smp$extraprob * smp$pitches
smp$wextraprob <- smp$wextraprob - mean(smp$wextraprob)
catrank <- summaryBy(wextraprob + pitches ~ cat_id, data=smp, FUN=sum, keep.names=T)
#catrank <- catrank[order(catrank$wextraprob),]
catrank$RV <- catrank$wextraprob * -.13
catrank$season <- season
write.csv(catrank[,-2], paste("I:/Baseball/analisi/catcher_fielding/framing/minors/milbframe", season, ".csv", sep=""), row.names=F, quote=F)
head(catrank)
sum(catrank$RV)
milb <- read.csv("I:/Baseball/analisi/catcher_fielding/framing/minors/milbframe2013.csv")
head(milb)
mf <- read.csv("I:/Baseball/analisi/catcher_fielding/framing/minors/milbframe2013.csv")
library(RODBC)
conn <- odbcConnect("BPro")
sqlQuery(conn, "use bp_players")
ids <- sqlQuery(conn, "select playerid, mlbcode from MasterPlayer_dd")
xmf <- merge(mf, ids, by.x="cat_id", by.y="playerid")
smf <- xmf[,c("mlbcode", "season", "RV", "pitches")]
names(smf) <- c("catcherid", "season", "run_value", "pitches_called")
write.csv(smf, "milb_framing2013.csv", row.names=F, quote=F)
getwd()
subset(milb, abs(cat_id)==641400)
install.packages("sendamilR")
install.packages("mail")
sendmail
library(mail)
sendmail
mail:::sendmail_
sendmail("max.marchi@gmail.com", "R notice", "Calculation finished.\nFetch your data!")
install.packages("shiny")
1000*60*60
library(RJSONIO)
isValidJSON("http://api.ean.com/ean-services/rs/hotel/v3/list?minorRev=16&cid=55505&apiKey=dnrkmnyscmxnnv3jg3p6ghbh&locale=en_US&currencyCode=EUR&city=Prague&supplierCacheTolerance=MED&arrivalDate=09/15/2013&departureDate=09/16/2013&room1=2&numberOfResults=5&supplierCacheTolerance=MED_ENHANCED")
x <- fromJSON("http://api.ean.com/ean-services/rs/hotel/v3/list?minorRev=16&cid=55505&apiKey=dnrkmnyscmxnnv3jg3p6ghbh&locale=en_US&currencyCode=EUR&city=Prague&supplierCacheTolerance=MED&arrivalDate=09/15/2013&departureDate=09/16/2013&room1=2&numberOfResults=5&supplierCacheTolerance=MED_ENHANCED")
x
x[[1]]
x[[1]]
x[[1]]
names(x[[1]])
names(x[[1]]$HotelList)
class(x[[1]]$HotelList)
names(x[[1]]$HotelList$HotelSummary)
x[[1]]$HotelList$HotelSummary
length(x[[1]]$HotelList$HotelSummary)
class(x[[1]]$HotelList$HotelSummary)
x[[1]]$HotelList$HotelSummary[[1]]
x[[1]]$HotelList$HotelSummary[[1]]
unlist(x[[1]]$HotelList$HotelSummary[[1]])
x[[1]]$HotelList$HotelSummary[[1]]
x[[1]]$HotelList$HotelSummary[[1]]["name"]
x[[1]]$HotelList$HotelSummary[[1]][c("name", "hotelRating", "tripAdvisorRating")]
x[[1]]$HotelList$HotelSummary[[1]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")]
as.data.frame(x[[1]]$HotelList$HotelSummary[[1]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")])
sapply(1:5, function(z) x[[1]]$HotelList$HotelSummary[[z]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")])
t(sapply(1:5, function(z) x[[1]]$HotelList$HotelSummary[[z]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")]))
as.data.frame(t(sapply(1:5, function(z) x[[1]]$HotelList$HotelSummary[[z]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")])))
x[[2]]
names(x[[1]])
library(RLastFM)
library(RLastFf)
library(RLastFm)
install.packages("RLastFM")
library(RLastFm)
library(RLastFM)
myev = geo.getEvents("Bologna, Italy")
names(myev)
myev[[1]]
myev[[2]]
myev[[3]]
evinfo <- event.getInfo(myev[[1]][1])
names(evinfo)
event.getInfo
RLastFM:::p.event.getinfo
load("I:/Hockey/Dati/testPBPR/nhlr-data/nhl20112012.RData")
head(games)
load("I:/Hockey/Dati/testPBPR/nhlr-data/mynhlscrapes20112012.RData")
names(all.games[[1]])
head(all.games[[1]])
head(all.games[[1]],20)
dfgames <- do.call(rbind, all.games)
head(player.list)
tail(player.list)
hist(dfgames$a1)
library(ggplot)
library(ggplot2)
head(dfgames)
table(dfgames$etype)
sog <- subset(dfgames, etype %in% c("GOAL",  "SHOT"))
head(subset(dfgames, etype=="MISS"))
head(subset(dfgames, etype=="SHOT"))
head(subset(dfgames, etype=="SOC"))
head(sog)
names(sog)
ggplot(sog, aes(x=xcoord, y=ycoord, col=etype)) +
geom_point()
install.packages("glmmLasso")
library(glmmLasso)
data("soccer")
head(soccer)
soccer[,c(4,5,9:16)]<-scale(soccer[,c(4,5,9:16)],center=TRUE,scale=TRUE)
soccer<-data.frame(soccer)
lm1 <- glmmLasso(points ~ transfer.spendings + I(transfer.spendings^2)
+ ave.unfair.score + transfer.receits + ball.possession
+ tackles + ave.attend + sold.out, rnd = list(team=~1),
lambda=400, data = soccer,control = list(steps=100,print.iter=TRUE))
lm1
glmmLasso
head(soccer)
lm1 <- glmmLasso(points ~ transfer.spendings + I(transfer.spendings^2)
+ ave.unfair.score + transfer.receits + ball.possession
+ tackles + ave.attend + sold.out, rnd = list(team=~1, pos=~1),
lambda=400, data = soccer,control = list(steps=100,print.iter=TRUE))
?lm1
?glmmLaso
?glmmLasso
library(RODBC)
options(stringsAsFactors=F)
conn <- odbcConnect("baseball")
sqlQuery(conn, "use retrosheet")
conn <- odbcConnect("baseball")
sqlQuery(conn, "use retrosheet")
dati <- sqlQuery(conn, "select game_id, event_id, pit_id, pos2_id, pos3_id, pos4_id
from events
where year_id = 2012
")
head(dati)
dati <- sqlQuery(conn, "select game_id, event_id, pit_id, pos2_fld_id, pos3_fld_id, pos4_fld_id
from events
where year_id = 2012
")
head(dati)
library(reshape2)
dtmlt <- melt(dati, c("game_id", "event_id", "pit_id"))
head(dtmlt)
dtcast <- cast(dtmlt[1:6,], game_id + event_id + value)
dtcast <- dcast(dtmlt[1:6,], game_id + event_id + value)
dtmlt[1:6,]
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value)
head(dtcast)
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0)
dtcast
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0, fun.aggregate=1)
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0, fun.aggregate=I)
dummy <- function(x) ifelse(is.na(x), 0, 1)
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0, fun.aggregate=dummy)
dtcast
library(RODBC)
conn <- odbcConnect("baseball")
sqlQuery(conn, "use baseball")
options(stringsAsFactors=F)
conn <- odbcConnect("BPro")
sqlQuery(conn, "show databases")
sqlQuery(conn, "use warehouse")
sqlTables(conn)[,3]
sqlColumns(conn, "events")[,4]
sqlColumns(conn, "games")[,4]
att <- sqlQuery(conn, "
select LVL, HOME_TEAM_ID, ATTEND_PARK_CT
from games
where YEAR_ID = 2013")
head(att)
table(att$LVL)
library(lattice)
histogram(~ ATTEND_PARK_CT | LVL, data=att)
library(doBy)
tmavg <- summaryBy(ATTEND_PARK_CT ~ HOME_TEAM_ID, data = att, FUN=mean, keep.names=T)
head(tmavg)
tmavg <- summaryBy(ATTEND_PARK_CT ~ HOME_TEAM_ID + LVL, data = att, FUN=mean, keep.names=T)
head(tmavg)
ohs <- subset(att, ATTEND_PARK_CT==0)
table(ohs$LVL)
subset(tmavg, LVL=="aaa")
subset(tmavg, LVL=="aax")
subset(tmavg, LVL=="afx")
subset(tmavg, LVL=="asx")
read.csv("https://dl.dropboxusercontent.com/u/67299146/food/foodlist.txt")
options(stringsAsFactors=F)
library(RODBC)
conn <- odbcConnect("baseball")
sqlQuery(conn, "use BDB")
master <- sqlQuery(conn, "select playerID, nameLast, nameFirst
from master")
pitching <- sqlQuery(conn, "select playerID, sum(G) as pitG
from pitching
group by playerID")
fielding <- sqlQuery(conn, "select playerID, sum(G) as posG
from fielding
where POS != 'P'
group by playerID")
pitching <- sqlQuery(conn, "select playerID, sum(G) as pitG
from pitching
group by playerID
having sum(G) > 50")
fielding <- sqlQuery(conn, "select playerID, sum(G) as posG
from fielding
where POS != 'P'
group by playerID
having sum(G) > 200")
multi <- merge(pitching, fielding)
multi
multi <- merge(master, multi)
multi
master <- sqlQuery(conn, "select playerID, nameLast, nameFirst, year(debut) as debut, year(finalgame) as retire
from master")
multi <- merge(pitching, fielding)
multi <- merge(master, multi)
multi
subset(multi, debut > 1920)
subset(multi, debut >= 1920)
pitching <- sqlQuery(conn, "select playerID, sum(G) as pitG
from pitching
group by playerID
having sum(G) > 20")
fielding <- sqlQuery(conn, "select playerID, sum(G) as posG
from fielding
where POS != 'P'
group by playerID
having sum(G) > 100")
multi <- merge(pitching, fielding)
multi <- merge(master, multi)
subset(multi, debut > 1920)
setwd("C:/Users/MAX/Documents/GitHub/baseball_R/data")
data2011 <- read.csv("all2011.csv", header=FALSE)
fields <- read.csv("fields.csv")
names(data2011) <- fields[, "Header"]
data2011$RUNS <- with(data2011, AWAY_SCORE_CT + HOME_SCORE_CT)
data2011$HALF.INNING <- with(data2011,
paste(GAME_ID, INN_CT, BAT_HOME_ID))
data2011$RUNS.SCORED <- with(data2011, (BAT_DEST_ID > 3) +
(RUN1_DEST_ID > 3) + (RUN2_DEST_ID > 3) + (RUN3_DEST_ID > 3))
RUNS.SCORED.INNING <- aggregate(data2011$RUNS.SCORED,
list(HALF.INNING = data2011$HALF.INNING), sum)
RUNS.SCORED.START <- aggregate(data2011$RUNS,
list(HALF.INNING = data2011$HALF.INNING), "[", 1)
MAX <- data.frame(HALF.INNING=RUNS.SCORED.START$HALF.INNING)
MAX$x <- RUNS.SCORED.INNING$x + RUNS.SCORED.START$x
data2011 <- merge(data2011, MAX)
N <- ncol(data2011)
names(data2011)[N] <- "MAX.RUNS"
data2011$RUNS.ROI <- data2011$MAX.RUNS - data2011$RUNS
get.state <- function(runner1, runner2, runner3, outs){
runners <- paste(runner1, runner2, runner3, sep="")
paste(runners, outs)
}
RUNNER1 <- ifelse(as.character(data2011[,"BASE1_RUN_ID"])=="", 0, 1)
RUNNER2 <- ifelse(as.character(data2011[,"BASE2_RUN_ID"])=="", 0, 1)
RUNNER3 <- ifelse(as.character(data2011[,"BASE3_RUN_ID"])=="", 0, 1)
data2011$STATE <- get.state(RUNNER1, RUNNER2, RUNNER3, data2011$OUTS_CT)
NRUNNER1 <- with(data2011, as.numeric(RUN1_DEST_ID==1 | BAT_DEST_ID==1))
NRUNNER2 <- with(data2011, as.numeric(RUN1_DEST_ID==2 | RUN2_DEST_ID==2 | BAT_DEST_ID==2))
NRUNNER3 <- with(data2011, as.numeric(RUN1_DEST_ID==3 | RUN2_DEST_ID==3 |
RUN3_DEST_ID==3 | BAT_DEST_ID==3))
NOUTS <- with(data2011, OUTS_CT + EVENT_OUTS_CT)
data2011$NEW.STATE <- get.state(NRUNNER1, NRUNNER2, NRUNNER3, NOUTS)
data2011 <- subset(data2011, (STATE!=NEW.STATE) | (RUNS.SCORED>0))
library(plyr)
data.outs <- ddply(data2011, .(HALF.INNING), summarize,
Outs.Inning = sum(EVENT_OUTS_CT))
data2011 <- merge(data2011, data.outs)
data2011C <- subset(data2011, Outs.Inning == 3)
RUNS <- with(data2011C, aggregate(RUNS.ROI, list(STATE), mean))
RUNS$Outs <- substr(RUNS$Group, 5, 5)
RUNS <- RUNS[order(RUNS$Outs), ]
RUNS.out <- matrix(round(RUNS$x, 2), 8, 3)
dimnames(RUNS.out)[[2]] <- c("0 outs", "1 out", "2 outs")
dimnames(RUNS.out)[[1]] <- c("000", "001", "010", "011", "100", "101", "110", "111")
RUNS.2002 <- matrix(c(.51, 1.40, 1.14,  1.96, .90, 1.84, 1.51, 2.33,
.27,  .94,  .68,  1.36, .54, 1.18,  .94, 1.51,
.10,  .36,  .32,   .63, .23, .52,   .45, .78),
8, 3)
dimnames(RUNS.2002) <- dimnames(RUNS.out)
cbind(RUNS.out, RUNS.2002)
RUNS.POTENTIAL <- matrix(c(RUNS$x, rep(0, 8)), 32, 1)
dimnames(RUNS.POTENTIAL)[[1]] <- c(RUNS$Group, "000 3","001 3",
"010 3","011 3","100 3","101 3","110 3","111 3")
data2011$RUNS.STATE <- RUNS.POTENTIAL[data2011$STATE,]
data2011$RUNS.NEW.STATE <- RUNS.POTENTIAL[data2011$NEW.STATE,]
data2011$RUNS.VALUE <- data2011$RUNS.NEW.STATE - data2011$RUNS.STATE +
data2011$RUNS.SCORED
Roster <- read.csv("roster2011.csv")
albert.id <- subset(Roster, First.Name == "Albert" &
Last.Name == "Pujols")$Player.ID
albert.id <- as.character(albert.id)
albert <- subset(data2011, BAT_ID==albert.id)
albert <- subset(albert, BAT_EVENT_FL==TRUE)
albert[1:2, c("STATE", "NEW.STATE", "RUNS.VALUE")]
albert$RUNNERS <- substr(albert$STATE, 1, 3)
table(albert$RUNNERS)
with(albert, stripchart(RUNS.VALUE ~ RUNNERS, vertical=TRUE, jitter=0.2,
xlab="RUNNERS", method="jitter", pch=1, cex = 0.8))
abline(h=0)
A.runs <- aggregate(albert$RUNS.VALUE, list(albert$RUNNERS), sum)
names(A.runs)[2] <- "RUNS"
A.PA <- aggregate(albert$RUNS.VALUE, list(albert$RUNNERS), length)
names(A.PA)[2] <- "PA"
A <- merge(A.PA, A.runs)
A
sum(A$RUNS)
data2011b <- subset(data2011, BAT_EVENT_FL == TRUE)
runs.sums <- aggregate(data2011b$RUNS.VALUE, list(data2011b$BAT_ID), sum)
runs.pa <- aggregate(data2011b$RUNS.VALUE, list(data2011b$BAT_ID), length)
runs.start <- aggregate(data2011b$RUNS.STATE, list(data2011b$BAT_ID), sum)
names(runs.sums) <- c("Batter", "Runs")
names(runs.pa) <- c("Batter", "PA")
names(runs.start) <- c("Batter", "Runs.Start")
runs <- merge(runs.sums, runs.pa)
runs <- merge(runs, runs.start)
runs400 <- subset(runs, PA >=400)
head(runs400)
with(runs400, plot(Runs.Start, Runs))
with(runs400, lines(lowess(Runs.Start, Runs)))
abline(h=0)
runs400.top <- subset(runs400, Runs >=40)
roster2011 <- read.csv("roster2011.csv")
runs400.top <- merge(runs400.top,
roster2011, by.x="Batter", by.y="Player.ID")
with(runs400.top, text(Runs.Start, Runs, Last.Name, pos=1))
get.batting.pos <- function(batter){
TB <- table(subset(data2011,BAT_ID==batter)$BAT_LINEUP_ID)
names(TB)[TB==max(TB)][1]}
position <- sapply(as.character(runs400$Batter), get.batting.pos)
with(runs400, plot(Runs.Start, Runs, type="n"))
with(runs400, lines(lowess(Runs.Start, Runs)))
abline(h=0)
with(runs400, text(Runs.Start, Runs, position))
AP <- subset(runs400, Batter==albert.id)
points(AP$Runs.Start, AP$Runs, pch=19, cex=3)
d.homerun <- subset(data2011, EVENT_CD==23)
table(d.homerun$STATE)
round(prop.table(table(d.homerun$STATE)), 3)
library(MASS)
truehist(d.homerun$RUNS.VALUE)
subset(d.homerun, RUNS.VALUE==max(RUNS.VALUE))[1,
c("STATE", "NEW.STATE", "RUNS.VALUE")]
mean.HR <- mean(d.homerun$RUNS.VALUE)
mean.HR
abline(v = mean.HR, lwd=3)
text(1.5, 5, "Mean Runs Value", pos=4)
d.single <- subset(data2011, EVENT_CD == 20)
#library(MASS)
truehist(d.single$RUNS.VALUE)
table(d.single$STATE)
subset(d.single, d.single$RUNS.VALUE==
max(d.single$RUNS.VALUE))[, c("STATE", "NEW.STATE", "RUNS.VALUE")]
subset(d.single, d.single$RUNS.VALUE == min(d.single$RUNS.VALUE))[
, c("STATE", "NEW.STATE", "RUNS.VALUE")]
mean.single <- mean(d.single$RUNS.VALUE)
mean.single
abline(v = mean.single, lwd=3)
text(.5, 5, "Mean Runs Value", pos=4)
stealing <- subset(data2011, EVENT_CD==6 | EVENT_CD==4)
table(stealing$EVENT_CD)
table(stealing$STATE)
#library(MASS)
truehist(stealing$RUNS.VALUE)
stealing.1001 <- subset(stealing, STATE=="100 1")
table(stealing.1001$EVENT_CD)
with(stealing.1001, table(NEW.STATE))
mean(stealing.1001$RUNS.VALUE)
