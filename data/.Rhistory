library(RODBC)
conn <- odbcConnect("BPro")
60+35+66+120+75+85+95
library(RODBC)
conn <- odbcConnect("BPro")
library(RODBC)
conn <- odbcConnect("BPro")
sqlQuery(conn, "use warehouse")
anno <- 2013
sqltxt1 <- paste("
select game_id, lvl, year_id, pos2_fld_id, pit_id, bat_id
, PA_CALLED_BALL_CT as balls, PA_CALLED_STRIKE_CT as strikes
from events
where year_id = ", anno, "
and lvl in ('aaa', 'aax', 'afa', 'afx', 'asx')
", sep="")
sqltxt2 <- paste("
select game_id, lvl, base4_ump_id as umpirehid
from games
where year_id = ", anno, "
and lvl in ('aaa', 'aax', 'afa', 'afx', 'asx')
", sep="")
events <- sqlQuery(conn, sqltxt1)
games <- sqlQuery(conn, sqltxt2)
dati <- merge(events, games, by="game_id")
eval(parse(text=paste("dati", anno, " <- dati", sep="")))
eval(parse(text=paste("save(dati", anno, ", file='I:/Baseball/Dati/Various/MILBframe/dati", anno, ".rdata')", sep="")))
shell.exec("I:/beep.bat")
season <- 2013
memory.limit(4000)
options(stringsAsFactors=F)
library(RODBC)
library(doBy)
library(lme4)
yrstring <- paste(season-2, season-1, season, sep=", ")
yrstring
anni <- unlist(strsplit(yrstring, ", "))
anni
for(anno in anni){
load(paste("I:/Baseball/Dati/Various/MILBframe/dati", anno, ".rdata", sep=""))
}
eval(parse(text=paste("dati <- do.call(rbind, list(", paste(paste("dati", anni, sep=""), collapse=", "),"))", sep="")))
dati <- subset(dati, substr(lvl.x, 1, 2)=="aa")
#rm(dati2010, dati2011, dati2012)
gc()
framing <- summaryBy(balls + strikes ~ pos2_fld_id + pit_id+ bat_id+ umpirehid, data=dati, FUN=sum, keep.names=T)
framing$spct <- framing$strikes / (framing$balls + framing$strikes)
framing <- subset(framing, balls+strikes>0)
framing$pitches <- framing$balls + framing$strikes
fit <- lmer(spct ~ 1
+ (1 | pos2_fld_id)
+ (1 | pit_id)
+ (1 | bat_id)
+ (1 | umpirehid)
, data = framing
, weights = pitches
, family = binomial
)
shell.exec("I:/beep.bat")
catval <- data.frame(cat_id=rownames(ranef(fit)$pos2_fld_id), catval=ranef(fit)$pos2_fld_id[,1])
catval <- catval[order(catval$catval),]
pitval <- data.frame(pit_id=rownames(ranef(fit)$pit_id), pitval=ranef(fit)$pit_id[,1])
batval <- data.frame(bat_id=rownames(ranef(fit)$bat_id), batval=ranef(fit)$bat_id[,1])
umpval <- data.frame(ump_id=rownames(ranef(fit)$umpirehid), umpval=ranef(fit)$umpirehid[,1])
smp <- summaryBy(balls + strikes ~ year_id + pos2_fld_id + pit_id+ bat_id+ umpirehid, data=dati, FUN=sum, keep.names=T)
smp <- subset(smp, year_id == season)
smp$spct <- smp$strikes / (smp$balls + smp$strikes)
smp <- subset(smp, balls+strikes>0)
smp$pitches <- smp$balls + smp$strikes
names(smp)[2] <- "cat_id"
names(smp)[5] <- "ump_id"
smp <- merge(smp, pitval)
smp <- merge(smp, catval)
smp <- merge(smp, batval)
smp <- merge(smp, umpval)
smp$rancomb <- smp$pitval + smp$batval + smp$umpval + smp$catval
smp$avgcat <- exp(fixef(fit) + smp$pitval + smp$batval + smp$umpval) / (1 + exp(fixef(fit) + smp$pitval + smp$batval + smp$umpval))
smp$extraprob <- smp$spct - smp$avgcat
smp$wextraprob <- smp$extraprob * smp$pitches
smp$wextraprob <- smp$wextraprob - mean(smp$wextraprob)
catrank <- summaryBy(wextraprob + pitches ~ cat_id, data=smp, FUN=sum, keep.names=T)
#catrank <- catrank[order(catrank$wextraprob),]
catrank$RV <- catrank$wextraprob * -.13
catrank$season <- season
write.csv(catrank[,-2], paste("I:/Baseball/analisi/catcher_fielding/framing/minors/milbframe", season, ".csv", sep=""), row.names=F, quote=F)
head(catrank)
sum(catrank$RV)
milb <- read.csv("I:/Baseball/analisi/catcher_fielding/framing/minors/milbframe2013.csv")
head(milb)
mf <- read.csv("I:/Baseball/analisi/catcher_fielding/framing/minors/milbframe2013.csv")
library(RODBC)
conn <- odbcConnect("BPro")
sqlQuery(conn, "use bp_players")
ids <- sqlQuery(conn, "select playerid, mlbcode from MasterPlayer_dd")
xmf <- merge(mf, ids, by.x="cat_id", by.y="playerid")
smf <- xmf[,c("mlbcode", "season", "RV", "pitches")]
names(smf) <- c("catcherid", "season", "run_value", "pitches_called")
write.csv(smf, "milb_framing2013.csv", row.names=F, quote=F)
getwd()
subset(milb, abs(cat_id)==641400)
install.packages("sendamilR")
install.packages("mail")
sendmail
library(mail)
sendmail
mail:::sendmail_
sendmail("max.marchi@gmail.com", "R notice", "Calculation finished.\nFetch your data!")
install.packages("shiny")
1000*60*60
library(RJSONIO)
isValidJSON("http://api.ean.com/ean-services/rs/hotel/v3/list?minorRev=16&cid=55505&apiKey=dnrkmnyscmxnnv3jg3p6ghbh&locale=en_US&currencyCode=EUR&city=Prague&supplierCacheTolerance=MED&arrivalDate=09/15/2013&departureDate=09/16/2013&room1=2&numberOfResults=5&supplierCacheTolerance=MED_ENHANCED")
x <- fromJSON("http://api.ean.com/ean-services/rs/hotel/v3/list?minorRev=16&cid=55505&apiKey=dnrkmnyscmxnnv3jg3p6ghbh&locale=en_US&currencyCode=EUR&city=Prague&supplierCacheTolerance=MED&arrivalDate=09/15/2013&departureDate=09/16/2013&room1=2&numberOfResults=5&supplierCacheTolerance=MED_ENHANCED")
x
x[[1]]
x[[1]]
x[[1]]
names(x[[1]])
names(x[[1]]$HotelList)
class(x[[1]]$HotelList)
names(x[[1]]$HotelList$HotelSummary)
x[[1]]$HotelList$HotelSummary
length(x[[1]]$HotelList$HotelSummary)
class(x[[1]]$HotelList$HotelSummary)
x[[1]]$HotelList$HotelSummary[[1]]
x[[1]]$HotelList$HotelSummary[[1]]
unlist(x[[1]]$HotelList$HotelSummary[[1]])
x[[1]]$HotelList$HotelSummary[[1]]
x[[1]]$HotelList$HotelSummary[[1]]["name"]
x[[1]]$HotelList$HotelSummary[[1]][c("name", "hotelRating", "tripAdvisorRating")]
x[[1]]$HotelList$HotelSummary[[1]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")]
as.data.frame(x[[1]]$HotelList$HotelSummary[[1]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")])
sapply(1:5, function(z) x[[1]]$HotelList$HotelSummary[[z]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")])
t(sapply(1:5, function(z) x[[1]]$HotelList$HotelSummary[[z]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")]))
as.data.frame(t(sapply(1:5, function(z) x[[1]]$HotelList$HotelSummary[[z]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")])))
x[[2]]
names(x[[1]])
library(RLastFM)
library(RLastFf)
library(RLastFm)
install.packages("RLastFM")
library(RLastFm)
library(RLastFM)
myev = geo.getEvents("Bologna, Italy")
names(myev)
myev[[1]]
myev[[2]]
myev[[3]]
evinfo <- event.getInfo(myev[[1]][1])
names(evinfo)
event.getInfo
RLastFM:::p.event.getinfo
load("I:/Hockey/Dati/testPBPR/nhlr-data/nhl20112012.RData")
head(games)
load("I:/Hockey/Dati/testPBPR/nhlr-data/mynhlscrapes20112012.RData")
names(all.games[[1]])
head(all.games[[1]])
head(all.games[[1]],20)
dfgames <- do.call(rbind, all.games)
head(player.list)
tail(player.list)
hist(dfgames$a1)
library(ggplot)
library(ggplot2)
head(dfgames)
table(dfgames$etype)
sog <- subset(dfgames, etype %in% c("GOAL",  "SHOT"))
head(subset(dfgames, etype=="MISS"))
head(subset(dfgames, etype=="SHOT"))
head(subset(dfgames, etype=="SOC"))
head(sog)
names(sog)
ggplot(sog, aes(x=xcoord, y=ycoord, col=etype)) +
geom_point()
install.packages("glmmLasso")
library(glmmLasso)
data("soccer")
head(soccer)
soccer[,c(4,5,9:16)]<-scale(soccer[,c(4,5,9:16)],center=TRUE,scale=TRUE)
soccer<-data.frame(soccer)
lm1 <- glmmLasso(points ~ transfer.spendings + I(transfer.spendings^2)
+ ave.unfair.score + transfer.receits + ball.possession
+ tackles + ave.attend + sold.out, rnd = list(team=~1),
lambda=400, data = soccer,control = list(steps=100,print.iter=TRUE))
lm1
glmmLasso
head(soccer)
lm1 <- glmmLasso(points ~ transfer.spendings + I(transfer.spendings^2)
+ ave.unfair.score + transfer.receits + ball.possession
+ tackles + ave.attend + sold.out, rnd = list(team=~1, pos=~1),
lambda=400, data = soccer,control = list(steps=100,print.iter=TRUE))
?lm1
?glmmLaso
?glmmLasso
library(RODBC)
options(stringsAsFactors=F)
conn <- odbcConnect("baseball")
sqlQuery(conn, "use retrosheet")
conn <- odbcConnect("baseball")
sqlQuery(conn, "use retrosheet")
dati <- sqlQuery(conn, "select game_id, event_id, pit_id, pos2_id, pos3_id, pos4_id
from events
where year_id = 2012
")
head(dati)
dati <- sqlQuery(conn, "select game_id, event_id, pit_id, pos2_fld_id, pos3_fld_id, pos4_fld_id
from events
where year_id = 2012
")
head(dati)
library(reshape2)
dtmlt <- melt(dati, c("game_id", "event_id", "pit_id"))
head(dtmlt)
dtcast <- cast(dtmlt[1:6,], game_id + event_id + value)
dtcast <- dcast(dtmlt[1:6,], game_id + event_id + value)
dtmlt[1:6,]
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value)
head(dtcast)
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0)
dtcast
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0, fun.aggregate=1)
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0, fun.aggregate=I)
dummy <- function(x) ifelse(is.na(x), 0, 1)
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0, fun.aggregate=dummy)
dtcast
library(RODBC)
conn <- odbcConnect("baseball")
sqlQuery(conn, "use baseball")
options(stringsAsFactors=F)
conn <- odbcConnect("BPro")
sqlQuery(conn, "show databases")
sqlQuery(conn, "use warehouse")
sqlTables(conn)[,3]
sqlColumns(conn, "events")[,4]
sqlColumns(conn, "games")[,4]
att <- sqlQuery(conn, "
select LVL, HOME_TEAM_ID, ATTEND_PARK_CT
from games
where YEAR_ID = 2013")
head(att)
table(att$LVL)
library(lattice)
histogram(~ ATTEND_PARK_CT | LVL, data=att)
library(doBy)
tmavg <- summaryBy(ATTEND_PARK_CT ~ HOME_TEAM_ID, data = att, FUN=mean, keep.names=T)
head(tmavg)
tmavg <- summaryBy(ATTEND_PARK_CT ~ HOME_TEAM_ID + LVL, data = att, FUN=mean, keep.names=T)
head(tmavg)
ohs <- subset(att, ATTEND_PARK_CT==0)
table(ohs$LVL)
subset(tmavg, LVL=="aaa")
subset(tmavg, LVL=="aax")
subset(tmavg, LVL=="afx")
subset(tmavg, LVL=="asx")
read.csv("https://dl.dropboxusercontent.com/u/67299146/food/foodlist.txt")
options(stringsAsFactors=F)
library(RODBC)
conn <- odbcConnect("baseball")
sqlQuery(conn, "use BDB")
master <- sqlQuery(conn, "select playerID, nameLast, nameFirst
from master")
pitching <- sqlQuery(conn, "select playerID, sum(G) as pitG
from pitching
group by playerID")
fielding <- sqlQuery(conn, "select playerID, sum(G) as posG
from fielding
where POS != 'P'
group by playerID")
pitching <- sqlQuery(conn, "select playerID, sum(G) as pitG
from pitching
group by playerID
having sum(G) > 50")
fielding <- sqlQuery(conn, "select playerID, sum(G) as posG
from fielding
where POS != 'P'
group by playerID
having sum(G) > 200")
multi <- merge(pitching, fielding)
multi
multi <- merge(master, multi)
multi
master <- sqlQuery(conn, "select playerID, nameLast, nameFirst, year(debut) as debut, year(finalgame) as retire
from master")
multi <- merge(pitching, fielding)
multi <- merge(master, multi)
multi
subset(multi, debut > 1920)
subset(multi, debut >= 1920)
pitching <- sqlQuery(conn, "select playerID, sum(G) as pitG
from pitching
group by playerID
having sum(G) > 20")
fielding <- sqlQuery(conn, "select playerID, sum(G) as posG
from fielding
where POS != 'P'
group by playerID
having sum(G) > 100")
multi <- merge(pitching, fielding)
multi <- merge(master, multi)
subset(multi, debut > 1920)
setwd("C:/Users/MAX/Documents/GitHub/baseball_R/data")
mussina <- expand.grid(balls=0 : 3, strikes=0 : 2)
mussina$value <- c(100, 118, 157, 207, 72, 82, 114, 171, 30, 38,
64, 122)
mussina
countmap <- function(data){
require(plotrix)
data <- xtabs(value ~ ., data)
color2D.matplot(data, show.values=2, axes=FALSE
, xlab="", ylab="")
axis(side=2, at=3.5:0.5, labels=rownames(data), las=1)
axis(side=3, at=0.5:2.5, labels=colnames(data))
mtext(text="balls", side=2, line=2, cex.lab=1)
mtext(text="strikes", side=3, line=2, cex.lab=1)
}
countmap(mussina)
install.packages("plotrix")
countmap(mussina)
nchar("BBSBFFFX")
sequences <- c("BBX", "C11BBC1S", "1X")
grep("1", sequences)
grepl("1", sequences)
grepl("11", sequences)
gsub("1", "", sequences)
pbp2011 <- read.csv("all2011.csv")
headers <- read.csv("fields.csv")
names(pbp2011) <- headers$Header
pbp2011$pseq <- gsub("[.>123N+*]", "", pbp2011$PITCH_SEQ_TX)
pbp2011$c10 <- grepl("^[BIPV]", pbp2011$pseq)
pbp2011$c01 <- grepl("^[CFKLMOQRST]", pbp2011$pseq)
pbp2011[1:10, c("PITCH_SEQ_TX", "c10", "c01")]
pbp11rc <- read.csv("pbp11rc.csv")
pbp11rc[1:5, c("GAME_ID", "EVENT_ID", "c00", "c10", "c20", "c11",
"c01", "c30", "c21", "c31", "c02", "c12", "c22", "c32",
"RUNS.VALUE")]
ab10 <- subset(pbp11rc, c10 == 1)
ab01 <- subset(pbp11rc, c01 == 1)
c(mean(ab10$RUNS.VALUE), mean(ab01$RUNS.VALUE))
runs.by.count <- expand.grid(balls=0 : 3, strikes = 0 : 2)
runs.by.count$value <- 0
bs.count.run.value <- function(b, s){
column.name <- paste("c", b, s, sep="")
mean(pbp11rc[pbp11rc[, column.name] == 1, "RUNS.VALUE"])
}
runs.by.count$value <- mapply(FUN=bs.count.run.value,
b=runs.by.count$balls,
s=runs.by.count$strikes
)
countmap(runs.by.count)
count22 <- subset(pbp11rc, c22 == 1)
mean(count22$RUNS.VALUE)
count22$after2 <- ifelse(count22$c20 == 1, "2-0",
ifelse(count22$c02 == 1, "0-2", "1-1"))
aggregate(RUNS.VALUE ~ after2, data=count22, FUN=mean)
count11 <- subset(pbp11rc, c11 == 1)
count11$after1 <- ifelse(count11$c10 == 1, "1-0", "0-1")
aggregate(RUNS.VALUE ~ after1, data=count11, FUN=mean)
load("balls_strikes_count.Rdata")
ls()
sampCabrera <- cabrera[sample(1:nrow(cabrera), 500),]
topKzone <- 3.5
botKzone <- 1.6
inKzone <- -.95
outKzone <- 0.95
library(lattice)
xyplot(pz ~ px, data=sampCabrera, groups=swung,
aspect="iso",
xlab="horizontal location (ft.)",
ylab="vertical location (ft.)",
auto.key=list(points=TRUE, text=c("not swung", "swung")
, space="right"),
panel=function(...){
panel.xyplot(...)
panel.rect(inKzone, botKzone, outKzone, topKzone,
border="black")
}
)
miggy.loess <- loess(swung ~ px + pz, data=cabrera,
control=loess.control(surface="direct"))
pred.area <- expand.grid(px=seq(-2, 2, 0.1), pz=seq(0, 6, 0.1))
pred.area$fit <- c(predict(miggy.loess, pred.area))
subset(pred.area, px == 0 & pz == 2.5) #down Broadway
subset(pred.area, px == 0 & pz == 0) #ball in the dirt
subset(pred.area, px == 2 & pz == 2.5) #way outside
contourplot(fit ~ px * pz, data=pred.area,
at=c(.2, .4, .6, .8),
aspect="iso",
xlim=c(-2, 2), ylim=c(0, 5),
xlab="horizontal location (ft.)",
ylab="vertical location (ft.)",
panel=function(...){
panel.contourplot(...)
panel.rect(inKzone, botKzone, outKzone, topKzone,
border="black", lty="dotted")
}
)
cabrera$bscount <- paste(cabrera$balls, cabrera$strikes, sep="-")
miggy00 <- subset(cabrera, bscount == "0-0")
miggy00loess <- loess(swung ~ px + pz, data=miggy00, control=
loess.control(surface="direct"))
pred.area$fit00 <- c(predict(miggy00loess, pred.area))
cabrera$bscount <- paste(cabrera$balls, cabrera$strikes, sep="-")
miggy20 <- subset(cabrera, bscount == "0-0")
miggy20loess <- loess(swung ~ px + pz, data=miggy20, control=
loess.control(surface="direct"))
pred.area$fit20 <- c(predict(miggy20loess, pred.area))
cabrera$bscount <- paste(cabrera$balls, cabrera$strikes, sep="-")
miggy02 <- subset(cabrera, bscount == "0-0")
miggy02loess <- loess(swung ~ px + pz, data=miggy02, control=
loess.control(surface="direct"))
pred.area$fit02 <- c(predict(miggy02loess, pred.area))
contourplot(fit00 + fit02 + fit20 ~ px * pz, data=pred.area,
at=c(.2, .4, .6),
aspect="iso",
xlim=c(-2, 2), ylim=c(0, 5),
xlab="horizontal location (ft.)",
ylab="vertical location (ft.)",
panel=function(...){
panel.contourplot(...)
panel.rect(inKzone, botKzone, outKzone, topKzone,
border="black", lty="dotted")
}
)
cabrera$bscount <- paste(cabrera$balls, cabrera$strikes, sep="-")
miggy20 <- subset(cabrera, bscount == "2-0")
miggy20loess <- loess(swung ~ px + pz, data=miggy20, control=
loess.control(surface="direct"))
pred.area$fit20 <- c(predict(miggy20loess, pred.area))
cabrera$bscount <- paste(cabrera$balls, cabrera$strikes, sep="-")
miggy02 <- subset(cabrera, bscount == "0-2")
miggy02loess <- loess(swung ~ px + pz, data=miggy02, control=
loess.control(surface="direct"))
pred.area$fit02 <- c(predict(miggy02loess, pred.area))
# below code assumes that these are available
contourplot(fit00 + fit02 + fit20 ~ px * pz, data=pred.area,
at=c(.2, .4, .6),
aspect="iso",
xlim=c(-2, 2), ylim=c(0, 5),
xlab="horizontal location (ft.)",
ylab="vertical location (ft.)",
panel=function(...){
panel.contourplot(...)
panel.rect(inKzone, botKzone, outKzone, topKzone,
border="black", lty="dotted")
}
)
table(verlander$pitch_type)
round(100 * prop.table(table(verlander$pitch_type)))
type_verlander_hand <- with(verlander, table(pitch_type,
batter_hand))
round(100 * prop.table(type_verlander_hand, margin=2))
verlander$bscount <- paste(verlander$balls, verlander$strikes,
sep="-")
verl_RHB <- subset(verlander, batter_hand == "R")
verl_type_cnt_R <- table(verl_RHB$bscount, verl_RHB$pitch_type)
round(100 * prop.table(verl_type_cnt_R, margin=1))
umpiresRHB <- subset(umpires, batter_hand == "R")
ump00 <- subset(umpiresRHB, balls == 0 & strikes == 0)
ump00smp <- ump00[sample(1:nrow(ump00), 3000),]
ump00.loess <- loess(called_strike ~ px + pz, data=ump00smp,
control=loess.control(surface="direct"))
ump00contour <- contourLines(x=seq(-2, 2, 0.1),
y=seq(0, 6, 0.1),
z=predict(ump00.loess, pred.area),
levels=c(.5))
ump00df <- as.data.frame(ump00contour)
ump00df$bscount <- "0-0"
ump00contour
ump00df <- as.data.frame(ump00contour[[1]])
ump00df$bscount <- "0-0"
ump02 <- subset(umpiresRHB, balls == 0 & strikes == 0)
ump02smp <- ump02[sample(1:nrow(ump02), 3000),]
ump02.loess <- loess(called_strike ~ px + pz, data=ump02smp,
control=loess.control(surface="direct"))
ump02contour <- contourLines(x=seq(-2, 2, 0.1),
y=seq(0, 6, 0.1),
z=predict(ump02.loess, pred.area),
levels=c(.5))
ump02df <- as.data.frame(ump02contour)
ump02df <- as.data.frame(ump02contour[[1]])
ump02df$bscount <- "0-2"
ump30 <- subset(umpiresRHB, balls == 0 & strikes == 0)
ump30smp <- ump30[sample(1:nrow(ump30), 3000),]
ump30.loess <- loess(called_strike ~ px + pz, data=ump30smp,
control=loess.control(surface="direct"))
ump30contour <- contourLines(x=seq(-2, 2, 0.1),
y=seq(0, 6, 0.1),
z=predict(ump30.loess, pred.area),
levels=c(.5))
ump30df <- as.data.frame(ump30contour)
ump30df$bscount <- "3-0"
umpireContours <- rbind(ump00df, ump02df, ump30df)
trellis.par.set(theme=canonical.theme(color=FALSE))
myKey <- list(lines=TRUE
, points=FALSE
, space="right"
, title="balls/strikes count"
, cex.title=1
, padding=4)
xyplot(y ~ x , data=umpireContours
, groups=bscount
, type="l", aspect="iso"
, col="black"
, xlim=c(-2, 2), ylim=c(0, 5)
, xlab="horizontal location (ft.)"
, ylab="vertical location (ft.)"
, auto.key=myKey
, panel=function(...){
panel.xyplot(...)
panel.rect(inKzone, botKzone, outKzone, topKzone,
border="grey70", lwd=2)
}
)
