sqltxt2 <- paste("
select game_id, lvl, base4_ump_id as umpirehid
from games
where year_id = ", anno, "
and lvl in ('aaa', 'aax', 'afa', 'afx', 'asx')
", sep="")
events <- sqlQuery(conn, sqltxt1)
games <- sqlQuery(conn, sqltxt2)
dati <- merge(events, games, by="game_id")
eval(parse(text=paste("dati", anno, " <- dati", sep="")))
eval(parse(text=paste("save(dati", anno, ", file='I:/Baseball/Dati/Various/MILBframe/dati", anno, ".rdata')", sep="")))
shell.exec("I:/beep.bat")
season <- 2013
memory.limit(4000)
options(stringsAsFactors=F)
library(RODBC)
library(doBy)
library(lme4)
yrstring <- paste(season-2, season-1, season, sep=", ")
yrstring
anni <- unlist(strsplit(yrstring, ", "))
anni
for(anno in anni){
load(paste("I:/Baseball/Dati/Various/MILBframe/dati", anno, ".rdata", sep=""))
}
eval(parse(text=paste("dati <- do.call(rbind, list(", paste(paste("dati", anni, sep=""), collapse=", "),"))", sep="")))
dati <- subset(dati, substr(lvl.x, 1, 2)=="aa")
#rm(dati2010, dati2011, dati2012)
gc()
framing <- summaryBy(balls + strikes ~ pos2_fld_id + pit_id+ bat_id+ umpirehid, data=dati, FUN=sum, keep.names=T)
framing$spct <- framing$strikes / (framing$balls + framing$strikes)
framing <- subset(framing, balls+strikes>0)
framing$pitches <- framing$balls + framing$strikes
fit <- lmer(spct ~ 1
+ (1 | pos2_fld_id)
+ (1 | pit_id)
+ (1 | bat_id)
+ (1 | umpirehid)
, data = framing
, weights = pitches
, family = binomial
)
shell.exec("I:/beep.bat")
catval <- data.frame(cat_id=rownames(ranef(fit)$pos2_fld_id), catval=ranef(fit)$pos2_fld_id[,1])
catval <- catval[order(catval$catval),]
pitval <- data.frame(pit_id=rownames(ranef(fit)$pit_id), pitval=ranef(fit)$pit_id[,1])
batval <- data.frame(bat_id=rownames(ranef(fit)$bat_id), batval=ranef(fit)$bat_id[,1])
umpval <- data.frame(ump_id=rownames(ranef(fit)$umpirehid), umpval=ranef(fit)$umpirehid[,1])
smp <- summaryBy(balls + strikes ~ year_id + pos2_fld_id + pit_id+ bat_id+ umpirehid, data=dati, FUN=sum, keep.names=T)
smp <- subset(smp, year_id == season)
smp$spct <- smp$strikes / (smp$balls + smp$strikes)
smp <- subset(smp, balls+strikes>0)
smp$pitches <- smp$balls + smp$strikes
names(smp)[2] <- "cat_id"
names(smp)[5] <- "ump_id"
smp <- merge(smp, pitval)
smp <- merge(smp, catval)
smp <- merge(smp, batval)
smp <- merge(smp, umpval)
smp$rancomb <- smp$pitval + smp$batval + smp$umpval + smp$catval
smp$avgcat <- exp(fixef(fit) + smp$pitval + smp$batval + smp$umpval) / (1 + exp(fixef(fit) + smp$pitval + smp$batval + smp$umpval))
smp$extraprob <- smp$spct - smp$avgcat
smp$wextraprob <- smp$extraprob * smp$pitches
smp$wextraprob <- smp$wextraprob - mean(smp$wextraprob)
catrank <- summaryBy(wextraprob + pitches ~ cat_id, data=smp, FUN=sum, keep.names=T)
#catrank <- catrank[order(catrank$wextraprob),]
catrank$RV <- catrank$wextraprob * -.13
catrank$season <- season
write.csv(catrank[,-2], paste("I:/Baseball/analisi/catcher_fielding/framing/minors/milbframe", season, ".csv", sep=""), row.names=F, quote=F)
head(catrank)
sum(catrank$RV)
milb <- read.csv("I:/Baseball/analisi/catcher_fielding/framing/minors/milbframe2013.csv")
head(milb)
mf <- read.csv("I:/Baseball/analisi/catcher_fielding/framing/minors/milbframe2013.csv")
library(RODBC)
conn <- odbcConnect("BPro")
sqlQuery(conn, "use bp_players")
ids <- sqlQuery(conn, "select playerid, mlbcode from MasterPlayer_dd")
xmf <- merge(mf, ids, by.x="cat_id", by.y="playerid")
smf <- xmf[,c("mlbcode", "season", "RV", "pitches")]
names(smf) <- c("catcherid", "season", "run_value", "pitches_called")
write.csv(smf, "milb_framing2013.csv", row.names=F, quote=F)
getwd()
subset(milb, abs(cat_id)==641400)
install.packages("sendamilR")
install.packages("mail")
sendmail
library(mail)
sendmail
mail:::sendmail_
sendmail("max.marchi@gmail.com", "R notice", "Calculation finished.\nFetch your data!")
install.packages("shiny")
1000*60*60
library(RJSONIO)
isValidJSON("http://api.ean.com/ean-services/rs/hotel/v3/list?minorRev=16&cid=55505&apiKey=dnrkmnyscmxnnv3jg3p6ghbh&locale=en_US&currencyCode=EUR&city=Prague&supplierCacheTolerance=MED&arrivalDate=09/15/2013&departureDate=09/16/2013&room1=2&numberOfResults=5&supplierCacheTolerance=MED_ENHANCED")
x <- fromJSON("http://api.ean.com/ean-services/rs/hotel/v3/list?minorRev=16&cid=55505&apiKey=dnrkmnyscmxnnv3jg3p6ghbh&locale=en_US&currencyCode=EUR&city=Prague&supplierCacheTolerance=MED&arrivalDate=09/15/2013&departureDate=09/16/2013&room1=2&numberOfResults=5&supplierCacheTolerance=MED_ENHANCED")
x
x[[1]]
x[[1]]
x[[1]]
names(x[[1]])
names(x[[1]]$HotelList)
class(x[[1]]$HotelList)
names(x[[1]]$HotelList$HotelSummary)
x[[1]]$HotelList$HotelSummary
length(x[[1]]$HotelList$HotelSummary)
class(x[[1]]$HotelList$HotelSummary)
x[[1]]$HotelList$HotelSummary[[1]]
x[[1]]$HotelList$HotelSummary[[1]]
unlist(x[[1]]$HotelList$HotelSummary[[1]])
x[[1]]$HotelList$HotelSummary[[1]]
x[[1]]$HotelList$HotelSummary[[1]]["name"]
x[[1]]$HotelList$HotelSummary[[1]][c("name", "hotelRating", "tripAdvisorRating")]
x[[1]]$HotelList$HotelSummary[[1]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")]
as.data.frame(x[[1]]$HotelList$HotelSummary[[1]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")])
sapply(1:5, function(z) x[[1]]$HotelList$HotelSummary[[z]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")])
t(sapply(1:5, function(z) x[[1]]$HotelList$HotelSummary[[z]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")]))
as.data.frame(t(sapply(1:5, function(z) x[[1]]$HotelList$HotelSummary[[z]][c("name", "hotelRating", "tripAdvisorRating", "lowRate")])))
x[[2]]
names(x[[1]])
library(RLastFM)
library(RLastFf)
library(RLastFm)
install.packages("RLastFM")
library(RLastFm)
library(RLastFM)
myev = geo.getEvents("Bologna, Italy")
names(myev)
myev[[1]]
myev[[2]]
myev[[3]]
evinfo <- event.getInfo(myev[[1]][1])
names(evinfo)
event.getInfo
RLastFM:::p.event.getinfo
load("I:/Hockey/Dati/testPBPR/nhlr-data/nhl20112012.RData")
head(games)
load("I:/Hockey/Dati/testPBPR/nhlr-data/mynhlscrapes20112012.RData")
names(all.games[[1]])
head(all.games[[1]])
head(all.games[[1]],20)
dfgames <- do.call(rbind, all.games)
head(player.list)
tail(player.list)
hist(dfgames$a1)
library(ggplot)
library(ggplot2)
head(dfgames)
table(dfgames$etype)
sog <- subset(dfgames, etype %in% c("GOAL",  "SHOT"))
head(subset(dfgames, etype=="MISS"))
head(subset(dfgames, etype=="SHOT"))
head(subset(dfgames, etype=="SOC"))
head(sog)
names(sog)
ggplot(sog, aes(x=xcoord, y=ycoord, col=etype)) +
geom_point()
install.packages("glmmLasso")
library(glmmLasso)
data("soccer")
head(soccer)
soccer[,c(4,5,9:16)]<-scale(soccer[,c(4,5,9:16)],center=TRUE,scale=TRUE)
soccer<-data.frame(soccer)
lm1 <- glmmLasso(points ~ transfer.spendings + I(transfer.spendings^2)
+ ave.unfair.score + transfer.receits + ball.possession
+ tackles + ave.attend + sold.out, rnd = list(team=~1),
lambda=400, data = soccer,control = list(steps=100,print.iter=TRUE))
lm1
glmmLasso
head(soccer)
lm1 <- glmmLasso(points ~ transfer.spendings + I(transfer.spendings^2)
+ ave.unfair.score + transfer.receits + ball.possession
+ tackles + ave.attend + sold.out, rnd = list(team=~1, pos=~1),
lambda=400, data = soccer,control = list(steps=100,print.iter=TRUE))
?lm1
?glmmLaso
?glmmLasso
library(RODBC)
options(stringsAsFactors=F)
conn <- odbcConnect("baseball")
sqlQuery(conn, "use retrosheet")
conn <- odbcConnect("baseball")
sqlQuery(conn, "use retrosheet")
dati <- sqlQuery(conn, "select game_id, event_id, pit_id, pos2_id, pos3_id, pos4_id
from events
where year_id = 2012
")
head(dati)
dati <- sqlQuery(conn, "select game_id, event_id, pit_id, pos2_fld_id, pos3_fld_id, pos4_fld_id
from events
where year_id = 2012
")
head(dati)
library(reshape2)
dtmlt <- melt(dati, c("game_id", "event_id", "pit_id"))
head(dtmlt)
dtcast <- cast(dtmlt[1:6,], game_id + event_id + value)
dtcast <- dcast(dtmlt[1:6,], game_id + event_id + value)
dtmlt[1:6,]
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value)
head(dtcast)
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0)
dtcast
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0, fun.aggregate=1)
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0, fun.aggregate=I)
dummy <- function(x) ifelse(is.na(x), 0, 1)
dtcast <- dcast(data=dtmlt[1:6,], formula = game_id + event_id ~ value, fill=0, fun.aggregate=dummy)
dtcast
library(RODBC)
conn <- odbcConnect("baseball")
sqlQuery(conn, "use baseball")
options(stringsAsFactors=F)
conn <- odbcConnect("BPro")
sqlQuery(conn, "show databases")
sqlQuery(conn, "use warehouse")
sqlTables(conn)[,3]
sqlColumns(conn, "events")[,4]
sqlColumns(conn, "games")[,4]
att <- sqlQuery(conn, "
select LVL, HOME_TEAM_ID, ATTEND_PARK_CT
from games
where YEAR_ID = 2013")
head(att)
table(att$LVL)
library(lattice)
histogram(~ ATTEND_PARK_CT | LVL, data=att)
library(doBy)
tmavg <- summaryBy(ATTEND_PARK_CT ~ HOME_TEAM_ID, data = att, FUN=mean, keep.names=T)
head(tmavg)
tmavg <- summaryBy(ATTEND_PARK_CT ~ HOME_TEAM_ID + LVL, data = att, FUN=mean, keep.names=T)
head(tmavg)
ohs <- subset(att, ATTEND_PARK_CT==0)
table(ohs$LVL)
subset(tmavg, LVL=="aaa")
subset(tmavg, LVL=="aax")
subset(tmavg, LVL=="afx")
subset(tmavg, LVL=="asx")
read.csv("https://dl.dropboxusercontent.com/u/67299146/food/foodlist.txt")
options(stringsAsFactors=F)
library(RODBC)
conn <- odbcConnect("baseball")
sqlQuery(conn, "use BDB")
master <- sqlQuery(conn, "select playerID, nameLast, nameFirst
from master")
pitching <- sqlQuery(conn, "select playerID, sum(G) as pitG
from pitching
group by playerID")
fielding <- sqlQuery(conn, "select playerID, sum(G) as posG
from fielding
where POS != 'P'
group by playerID")
pitching <- sqlQuery(conn, "select playerID, sum(G) as pitG
from pitching
group by playerID
having sum(G) > 50")
fielding <- sqlQuery(conn, "select playerID, sum(G) as posG
from fielding
where POS != 'P'
group by playerID
having sum(G) > 200")
multi <- merge(pitching, fielding)
multi
multi <- merge(master, multi)
multi
master <- sqlQuery(conn, "select playerID, nameLast, nameFirst, year(debut) as debut, year(finalgame) as retire
from master")
multi <- merge(pitching, fielding)
multi <- merge(master, multi)
multi
subset(multi, debut > 1920)
subset(multi, debut >= 1920)
pitching <- sqlQuery(conn, "select playerID, sum(G) as pitG
from pitching
group by playerID
having sum(G) > 20")
fielding <- sqlQuery(conn, "select playerID, sum(G) as posG
from fielding
where POS != 'P'
group by playerID
having sum(G) > 100")
multi <- merge(pitching, fielding)
multi <- merge(master, multi)
subset(multi, debut > 1920)
setwd("C:/Users/MAX/Documents/GitHub/baseball_R/data")
Batting <- read.csv("lahman/Batting.csv")
Master <- read.csv("lahman/Master.csv")
mantle.info <- subset(Master, nameFirst=="Mickey" & nameLast=="Mantle")
mantle.id <- as.character(mantle.info$playerID)
library(car)
install.packages("car")
library(car)
Batting$SF <- recode(Batting$SF, "NA = 0")
Batting$HBP <- recode(Batting$HBP, "NA = 0")
get.birthyear <- function(player.id){
playerline <- subset(Master, playerID == player.id)
birthyear <- playerline$birthYear
birthmonth <- playerline$birthMonth
ifelse(birthmonth >= 7, birthyear, birthyear + 1)
}
get.birthyear(mantle.id)
get.stats <- function(player.id){
d <- subset(Batting, playerID==player.id)
byear <- get.birthyear(player.id)
d$Age <- d$yearID - byear
d$SLG <- with(d, (H - X2B - X3B - HR +
2 * X2B + 3 * X3B + 4 * HR) / AB)
d$OBP <- with(d, (H + BB) / (H + AB + BB + SF))
d$OPS <- with(d, SLG + OBP)
d
}
Mantle <- get.stats(mantle.id)
with(Mantle, plot(Age, OPS, cex=1.5, pch=19))
fit.model <- function(d){
fit <- lm(OPS ~ I(Age - 30) + I((Age - 30)^2), data = d)
b <- coef(fit)
Age.max <- 30 - b[2] / b[3] / 2
Max <- b[1] - b[2] ^ 2 / b[3] / 4
list(fit = fit,
Age.max = Age.max, Max = Max)
}
F2 <- fit.model(Mantle)
coef(F2$fit)
c(F2$Age.max, F2$Max)
lines(Mantle$Age, predict(F2$fit, Age=Mantle$Age), lwd=3)
abline(v = F2$Age.max, lwd=3, lty=2, col="grey")
abline(h = F2$Max, lwd=3, lty=2, col="grey")
text(29, .72, "Peak.age" , cex=2)
text(20, 1, "Max", cex=2)
summary(F2$fit)
Fielding <- read.csv("lahman/Fielding.csv")
library(plyr)
AB.totals <- ddply(Batting, .(playerID),
summarize,
Career.AB = sum(AB, na.rm = TRUE))
Batting <- merge(Batting, AB.totals)
Batting.2000 <- subset(Batting, Career.AB >=2000)
find.position <- function(p){
positions <- c("OF", "1B", "2B", "SS", "3B", "C", "P", "DH")
d <- subset(Fielding, playerID == p)
count.games <- function(po)
sum(subset(d, POS == po)$G)
FLD <- sapply(positions, count.games)
positions[FLD == max(FLD)][1]
}
PLAYER <- as.character(unique(Batting.2000$playerID))
POSITIONS <- sapply(PLAYER, find.position)
Fielding.2000 <- data.frame(playerID = names(POSITIONS),
POS = POSITIONS)
Batting.2000 <- merge(Batting.2000, Fielding.2000)
library(plyr)
C.totals <- ddply(Batting, .(playerID),
summarize,
C.G = sum(G, na.rm = TRUE),
C.AB = sum(AB, na.rm = TRUE),
C.R = sum(R, na.rm = TRUE),
C.H = sum(H, na.rm = TRUE),
C.2B = sum(X2B, na.rm = TRUE),
C.3B = sum(X3B, na.rm = TRUE),
C.HR = sum(HR, na.rm = TRUE),
C.RBI = sum(RBI, na.rm = TRUE),
C.BB = sum(BB, na.rm = TRUE),
C.SO = sum(SO, na.rm = TRUE),
C.SB = sum(SB, na.rm = TRUE))
C.totals$C.AVG <- with(C.totals, C.H / C.AB)
C.totals$C.SLG <- with(C.totals,
(C.H - C.2B - C.3B - C.HR + 2 * C.2B +
3 * C.3B + 4 * C.HR) / C.AB)
C.totals <- merge(C.totals, Fielding.2000)
C.totals$Value.POS <- with(C.totals,
ifelse(POS=="C", 240,
ifelse(POS=="SS", 168,
ifelse(POS=="2B", 132,
ifelse(POS=="3B", 84,
ifelse(POS=="OF", 48,
ifelse(POS=="1B", 12, 0)))))))
similar <- function(p, number=10){
P <- subset(C.totals, playerID == p)
C.totals$SS <- with(C.totals,
1000 -
floor(abs(C.G - P$C.G) / 20) -
floor(abs(C.AB - P$C.AB) / 75) -
floor(abs(C.R - P$C.R) / 10) -
floor(abs(C.H - P$C.H) / 15) -
floor(abs(C.2B - P$C.2B) / 5) -
floor(abs(C.3B - P$C.3B) / 4) -
floor(abs(C.HR - P$C.HR) / 2) -
floor(abs(C.RBI - P$C.RBI) / 10) -
floor(abs(C.BB - P$C.BB) / 25) -
floor(abs(C.SO - P$C.SO) / 150) -
floor(abs(C.SB - P$C.SB) / 20) -
floor(abs(C.AVG - P$C.AVG) / 0.001) -
floor(abs(C.SLG - P$C.SLG) / 0.002) -
abs(Value.POS - P$Value.POS))
C.totals <- C.totals[order(C.totals$SS, decreasing = TRUE), ]
C.totals[1:number, ]
}
similar(mantle.id, 6)
collapse.stint <- function(d){
G <- sum(d$G); AB <- sum(d$AB); R <- sum(d$R)
H <- sum(d$H); X2B <- sum(d$X2B); X3B <- sum(d$X3B)
HR <- sum(d$HR); RBI <- sum(d$RBI); SB <- sum(d$SB)
CS <- sum(d$CS); BB <- sum(d$BB); SH <- sum(d$SH)
SF <- sum(d$SF); HBP <- sum(d$HBP)
SLG <- (H - X2B - X3B - HR + 2 * X2B +
3 * X3B + 4 * HR) / AB
OBP <- (H + BB + HBP) / (AB + BB + HBP + SF)
OPS <- SLG + OBP
data.frame(G = G, AB = AB, R = R, H = H, X2B = X2B,
X3B = X3B, HR = HR, RBI = RBI, SB = SB,
CS = CS, BB = BB, HBP = HBP, SH = SH, SF = SF,
SLG = SLG, OBP = OBP, OPS = OPS,
Career.AB = d$Career.AB[1], POS = d$POS[1])
}
Batting.2000 <- ddply(Batting.2000,
.(playerID, yearID), collapse.stint)
player.list <- as.character(unique(Batting.2000$playerID))
birthyears <- sapply(player.list, get.birthyear)
Batting.2000 <- merge(Batting.2000,
data.frame(playerID=player.list,
Birthyear=birthyears))
Batting.2000$Age <- with(Batting.2000, yearID - Birthyear)
Batting.2000 <- Batting.2000[complete.cases(Batting.2000$Age), ]
fit.traj <- function(d){
fit <- lm(OPS ~ I(Age - 30) + I((Age - 30)^2), data = d)
data.frame(Age = d$Age, Fit = predict(fit, Age = d$Age))
}
plot.traj2 <- function(first, last, n.similar = 5, ncol){
require(plyr)
require(ggplot2)
get.name <- function(playerid){
d1 <- subset(Master, playerID == playerid)
with(d1, paste(nameFirst, nameLast))
}
player.id <- subset(Master,
nameFirst == first & nameLast == last)$playerID
player.id <- as.character(player.id)
player.list <- as.character(similar(player.id, n.similar)$playerID)
Batting.new <- subset(Batting.2000, playerID %in% player.list)
F2 <- ddply(Batting.new, .(playerID), fit.traj)
F2 <- merge(F2,
data.frame(playerID = player.list,
Name = sapply(as.character(player.list), get.name)))
print(ggplot(F2, aes(Age, Fit)) + geom_line(size=1.5) +
facet_wrap(~ Name, ncol=ncol) + theme_bw())
return(Batting.new)
}
d <- plot.traj2("Mickey", "Mantle", 6, 2)
d <- plot.traj2("Derek", "Jeter", 9, 3)
fit.traj2 <- function(d){
f <- lm(OPS ~ I(Age - 30) + I((Age - 30)^2), data = d)
b <- coef(f)
Age.max <- round(30 - b[2] / b[3] / 2, 1)
Max <- round(b[1] - b[2] ^ 2 / b[3] / 4, 3)
data.frame(Age.max = Age.max, Max = Max,
Curve = round(b[3], 5))
}
d <- plot.traj2("Derek", "Jeter", 9, 3)
S <- ddply(d, .(playerID), fit.traj2)
S
with(S, plot(Age.max, Curve, pch=19, cex=1.5,
xlab="Peak Age", ylab="Curvature",
xlim=c(27, 36), ylim=c(-0.0035, 0)))
S$lastNames <- as.character(subset(Master,
playerID %in% S$playerID)$nameLast)
with(S, text(Age.max, Curve, lastNames, pos=3))
library(plyr)
midcareers <- ddply(Batting.2000, .(playerID),
summarize,
Midyear = (min(yearID) + max(yearID))/2)
Batting.2000 <- merge(Batting.2000, midcareers)
fit.traj3 <- function(d){
b <- coef(lm(OPS ~ I(Age - 30) + I((Age - 30)^2), data = d))
data.frame(A = b[1], B = b[2], C = b[3],
Midyear = d$Midyear[1], Career.AB = d$Career.AB[1])
}
Beta.coef <- ddply(Batting.2000, .(playerID), fit.traj3)
Beta.coef$Peak.age <- with(Beta.coef, 30 - B / 2 / C)
with(Beta.coef,
plot(Midyear, Peak.age, ylim=c(20, 40),
xlab = "Mid Career", ylab = "Peak Age"))
i <- is.finite(Beta.coef$Peak.age)
with(Beta.coef,
lines(lowess(Midyear[i], Peak.age[i]), lwd=3))
with(Beta.coef,
plot(log2(Career.AB[i]), Peak.age[i], ylim=c(20, 40),
xlab = "log2 Career AB", ylab = "Peak Age"))
with(Beta.coef,
lines(lowess(log2(Career.AB[i]), Peak.age[i]), lwd=3))
Batting.2000a <- subset(Batting.2000, Midyear >= 1985 & Midyear <= 1995)
fit.traj4 <- function(d){
b <- coef(lm(OPS ~ I(Age - 30) + I((Age - 30)^2), data = d))
data.frame(A = b[1], B = b[2], C = b[3],
Peak.Age = 30 - b[2] / 2 / b[3],
Midyear = d$Midyear[1], Career.AB = d$Career.AB[1],
Position = d$POS[1])
}
Beta.estimates <- ddply(Batting.2000a, .(playerID), fit.traj4)
Beta.estimates1 <- subset(Beta.estimates, Position %in%
c("1B", "2B", "3B", "SS", "C", "OF"))
Beta.estimates1$Position <- Beta.estimates1$Position[ , drop=TRUE]
Beta.estimates1 <- merge(Beta.estimates1, Master)
stripchart(Peak.Age ~ Position, data=Beta.estimates1,
xlim=c(20, 40), method="jitter", pch=1)
special <- with(Beta.estimates1, identify(Peak.Age, Position,
n=5, labels=nameLast))
dnew <- subset(Batting.2000,
playerID %in% Beta.estimates1$playerID[special])
dnew <- merge(dnew, Master)
ggplot(dnew, aes(Age, OPS)) + geom_point(size=4) +
facet_wrap(~ nameLast, ncol=2) + ylim(0.4, 1.05) +
stat_smooth(method="lm", se=FALSE, size=1.5,
formula=y ~ poly(x, 2, raw=TRUE))  + theme_bw()
